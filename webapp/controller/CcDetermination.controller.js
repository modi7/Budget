sap.ui.define([
	"budget/controller/BaseController",
	"sap/ui/model/json/JSONModel",
	"sap/ui/core/routing/History"
], function (Controller, JSONModel, History) {
	"use strict";
	return Controller.extend("budget.controller.CcDetermination", {
		/**
		 * Called when a controller is instantiated and its View controls (if available) are already created.
		 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
		 * @memberOf budget.view.CcDetermination
		 */
		onInit: function () {

			var oViewModel = new JSONModel({
				busy: true,
				delay: 0,
				deleteVisible: false,
				saveVisible: false
			});
			this.setModel(oViewModel, "CCView");
			//			var iOriginalBusyDelay = this.getView().getBusyIndicatorDelay();

			this.getRouter().getRoute("detAffectation").attachPatternMatched(this._onCCMatched, this);

			// 			this.getOwnerComponent().getModel().metadataLoaded().then(function() {
			// 				// Restore original busy indicator delay for the object view
			// 				oViewModel.setProperty("/delay", iOriginalBusyDelay);
			// 			});

		},
		/* =========================================================== */
		/* event handlers                                              */
		/* =========================================================== */
		/**
		 * Event handler  for navigating back.
		 * It there is a history entry we go one step back in the browser history
		 * If not, it will replace the current entry of the browser history with the worklist route.
		 * @public
		 */
		onNavBack: function () {
			var sPreviousHash = History.getInstance().getPreviousHash();
			if (sPreviousHash !== undefined) {
				history.go(-1);
			} else {
				this.getRouter().navTo("worklist", {}, true);
			}
		},
		/**
		 *@memberOf budget.controller.CcDetermination
		 */
		onAddPress: function () {
			//This code was generated by the layout editor.
		},
		/**
		 *@memberOf budget.controller.CcDetermination
		 */
		onRemovePress: function () {
			//This code was generated by the layout editor.
			//This code was generated by the layout editor.
			/** @type sap.ui.table.Table */
			var oTable = this.byId("CCTable");
			//var aContexts = oTable.getBinding("rows").getContexts();// .getRows();
			var aIndex = oTable.getSelectedIndices();
			var iLength = aIndex.length - 1;
			//deleteCreatedEntry
			var oModel = this.getModel();
			aIndex.forEach(function(item, index) {
				if (iLength === index) {
					oModel.remove(oTable.getContextByIndex(item).getPath(), {
						success: this._deleteSuccess.bind(this)
					});
				} else {
					oModel.remove(oTable.getContextByIndex(item).getPath());
				}
			}, this);
			oTable.removeSelectionInterval(0, 150);			
		},

		onAffectationChange: function () {
			//This code was generated by the layout editor.
			this.getModel("CCView").setProperty("/saveVisible", this.getModel().hasPendingChanges() ? true : false);
			// if (this.getModel().hasPendingChanges()) {
			// 	this.getModel("CCView").setProperty("/saveVisible", true);

			// }
		},

		onSelectionTableChange: function () {
			var aRows = this.byId("CCTable").getSelectedIndices();
			this.getModel("objectView").setProperty("/deleteVisible", aRows.length > 0 ? true : false);
		},

		onSavePress: function () {
			var oModel = this.getModel();

			if (oModel.hasPendingChanges()) {
				oModel.submitChanges();
				this.getModel("CCView").setProperty("/saveVisible", false);
			}
		},

		/* =========================================================== 
		/* internal methods                                            */
		/* =========================================================== */
		/**
		 * Set Busy Dialog for table.
		 * @function
		 * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'
		 * @private
		 */

		_onCCMatched: function () {

			this._initBindingEventHandler();

		},

		_initBindingEventHandler: function () {
			if (!this.oBusyIndicator) {
				var oTable = this.byId("CCTable");
				this.oBusyIndicator = oTable.getNoData();
				var oBinding = oTable.getBinding("rows");
				oBinding.attachDataRequested(function () {
					oTable.setNoData(this.oBusyIndicator);
				});
				oBinding.attachDataReceived(function (oEvent) {
					//	var oData = oEvent.getParameter("data");
					oTable.setNoData(null);
				});
			}
		},

				_deleteSuccess: function() {
			this.getModel().refresh();
		}

	});
});