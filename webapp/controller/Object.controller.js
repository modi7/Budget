/*global location*/
sap.ui.define([
	"budget/controller/BaseController",
	"sap/ui/model/json/JSONModel",
	"sap/ui/core/routing/History",
	"sap/ui/model/Filter",
	"sap/ui/model/FilterOperator",
	"budget/model/formatter",
	"sap/m/MessageBox" //	'sap/viz/ui5/format/ChartFormatter',
	//	'sap/viz/ui5/api/env/Format'
], function(BaseController, JSONModel, History, Filter, FilterOperator, formatter, MessageBox) {
	"use strict";
	return BaseController.extend("budget.controller.Object", {
		formatter: formatter,
		/* =========================================================== */
		/* lifecycle methods                                           */
		/* =========================================================== */
		/**
		 * Called when the worklist controller is instantiated.
		 * @public
		 */
		onInit: function() {
			// this._initCustomFormat();
			// Model used to manipulate control states. The chosen values make sure,
			// detail page is busy indication immediately so there is no break in
			// between the busy indication for loading the view's meta data
			this.getRouter().getTargets().getTarget("object").attachDisplay(null, this._onObject, this);
			var iOriginalBusyDelay, dDate = new Date(),
				oViewModel = new JSONModel({
					busy: true,
					delay: 0,
					year: dDate.getFullYear(),
					month: dDate.getMonth() + 1,
					deleteVisible: false
				});
			this.setModel(oViewModel, "objectView");
			this._oDialogModel = new JSONModel({
				montant: null,
				debitCredit: false,
				saveEnabled: false,
				minDate: null,
				maxDate: null,
				textDebitCredit: "D\xE9bit",
				iconDebitCredit: "sap-icon://less"
			});
			this.setModel(this._oDialogModel, "newView");
			this.getRouter().getRoute("object").attachPatternMatched(this._onObjectMatched, this);
			// Store original busy indicator delay, so it can be restored later on
			iOriginalBusyDelay = this.getView().getBusyIndicatorDelay();
			this.getOwnerComponent().getModel().metadataLoaded().then(function() {
				// Restore original busy indicator delay for the object view
				oViewModel.setProperty("/delay", iOriginalBusyDelay);
			});
			var oTable = this.byId("table");
			// var oChart = this.byId("vizData");
			var oFilter = new Filter({
				filters: [
					new sap.ui.model.Filter({
						path: "Year",
						operator: "EQ",
						value1: dDate.getFullYear()
					}),
					new sap.ui.model.Filter({
						path: "Month",
						operator: "EQ",
						value1: dDate.getMonth() + 1
					})
				],
				and: true
			});
			this.oBusyIndicator = oTable.getNoData();
			// this.initBindingEventHandler();
			oTable.bindRows({
				path: "Ecritures",
				filters: oFilter,
				templateShareable: true
			}); //	iRows.filter(oFilter);
			// oChart.bindData({
			// 	path: "Repartitions",
			// 	filters: oFilter,
			// 	templateShareable: true
			// });
		},
		_filterTable: function() {
			var oFilter = new Filter({
				filters: [
					new sap.ui.model.Filter({
						path: "Year",
						operator: "EQ",
						value1: this.getModel("objectView").getProperty("/year")
					}),
					new sap.ui.model.Filter({
						path: "Month",
						operator: "EQ",
						value1: this.getModel("objectView").getProperty("/month")
					})
				],
				and: true
			});
			this.byId("table").getBinding("rows").filter(oFilter);
			/*			this.byId("vizData").getBinding("data").filter(oFilter);

			var oVizFrame = this.oVizFrame = this.getView().byId("idVizFrame");
			var oPopOver = this.getView().byId("idPopOver");
			oPopOver.connect(oVizFrame.getVizUid());
			oPopOver.setFormatString("__UI5__FloatMaxFraction2");*/
			var oModel = this.getModel("objectView");
			var iId = this.getView().getBindingContext().getProperty("id");
			var sSoldePath = this.getModel().createKey("SoldeMois", {
				id: iId.toString() + oModel.getProperty("/year") + oModel.getProperty("/month")
			});
			this._bindDetailPanel("/" + sSoldePath);
		},
		/* =========================================================== */
		/* event handlers                                              */
		/* =========================================================== */
		/**
		 * Event handler  for navigating back.
		 * It there is a history entry we go one step back in the browser history
		 * If not, it will replace the current entry of the browser history with the worklist route.
		 * @public
		 */
		onNavBack: function() {
			var sPreviousHash = History.getInstance().getPreviousHash();
			if (sPreviousHash !== undefined) {
				history.go(-1);
			} else {
				this.getRouter().navTo("worklist", {}, true);
			}
		},
		onSelectionChange: function() {
			//This code was generated by the layout editor.
			this._filterTable();
		},
		/**
		 *@memberOf budget.controller.Object
		 */
		onAddPress: function() {
			//This code was generated by the layout editor.
			/*var oModel = this.getModel("objectView");
			this.getRouter().getTargets().display("new", {
				mode: "update",
				month: oModel.getProperty("/month"),
				year: oModel.getProperty("/year"),
				id: this.getView().getBindingContext().getProperty("id")
			});*/
			if (!this._newDialog) {
				this._newDialog = sap.ui.xmlfragment(this.getView().getId(), "budget.fragment.newEcriture", this);
				this.getView().addDependent(this._valueHelpDialog);
			}
			var oViewModel = this.getModel("objectView");
			var oLocData = {
				montant: null,
				debitCredit: false,
				saveEnabled: false,
				minDate: new Date(oViewModel.getProperty("/year"), oViewModel.getProperty("/month") - 1, 1),
				maxDate: new Date(oViewModel.getProperty("/year"), oViewModel.getProperty("/month"), 0),
				textDebitCredit: "D\xE9bit",
				iconDebitCredit: "sap-icon://less"
			};
			this._oDialogModel.setData(oLocData);
			//	var oDate = sap.ui.core.Fragment.byId("newDialog", "newDate");
			var oDate = this.byId("newDate");
			if (oDate.setMinDate) {
				oDate.setMinDate(oLocData.minDate);
				oDate.setMaxDate(oLocData.maxDate);
			}
			var oContext = this.getModel().createEntry("Ecritures", {
				//		success: this._fnEntityCreated.bind(this),
				//		error: this._fnEntityCreationFailed.bind(this),
				properties: {
					CompteId: this.getView().getBindingContext().getProperty("id"),
					Month: oViewModel.getProperty("/month"),
					Year: oViewModel.getProperty("/year")
				}
			});
			this._newDialog.setModel(this._oDialogModel, "newView");
			this._newDialog.setModel(this.getModel());
			this._newDialog.setModel(this.getModel("appView"), "appView");
			this._newDialog.setBindingContext(oContext);
			this._newDialog.open();
		},

		onSelectionTableChange: function() {
			var aRows = this.byId("table").getSelectedIndices();
			this.getModel("objectView").setProperty("/deleteVisible", aRows.length > 0 ? true : false);
		},

		onTogglePress: function(oEvent) {
			var oModel = this._newDialog.getModel("newView");
			if (oEvent.getParameter("pressed")) {
				oModel.setProperty("/textDebitCredit", "Cr\xE9dit");
				oModel.setProperty("/iconDebitCredit", "sap-icon://add");
			} else {
				oModel.setProperty("/textDebitCredit", "D\xE9bit");
				oModel.setProperty("/iconDebitCredit", "sap-icon://less");
			}
		},

		onDialogSave: function() {
			var oModel = this._newDialog.getModel("newView");
			var oOdataModel = this.getModel();
			if (oModel.getProperty("/debitCredit")) {
				this.byId("DialogDebit").setValue(null);
				this.byId("DialogCredit").setValue(oModel.getProperty("/montant"));
			} else {
				this.byId("DialogCredit").setValue(null);
				this.byId("DialogDebit").setValue(oModel.getProperty("/montant"));
			}
			this.byId("DialogCarte").setValue(oModel.getProperty("/carte") ? "O" : null);
			oOdataModel.submitChanges();
			this._newDialog.close();
			oOdataModel.refresh();
		},

		onDialogCancel: function() {
			MessageBox.confirm("Are you sur you want to Cancel?", {
				//	styleClass: oComponent.getContentDensityClass(),
				onClose: function(oAction) {
					if (oAction === sap.m.MessageBox.Action.OK) {
						this.getModel().resetChanges();
						this._newDialog.close();
					}
				}.bind(this)
			});
		},

		onFormChange: function() {
			var aInputControls = this._getFormFields(this.byId("dialogSimpleForm"));
			var oControl, bError = false;
			aInputControls.forEach(function(item, index) {
				oControl = item.control;
				var sValue;
				if (item.required) {
					if (oControl.getValue) {
						sValue = oControl.getValue();
					} else {
						sValue = oControl.getSelectedKey();
					}
					if (!sValue) {
						bError = true;
						return;
					}
				}
			}, this);
			this._newDialog.getModel("newView").setProperty("/saveEnabled", !bError);
		},

		onDeletePress: function() {
			//This code was generated by the layout editor.
			var oTable = this.byId("table");
			var aRows = oTable.getRows();
			var aIndex = oTable.getSelectedIndices();
			//deleteCreatedEntry
			aIndex.forEach(function(item) {
				this.getModel.deleteCreatedEntry(aRows[item].getBindingContext()); // aRows[item].setVisible(false);
			}, this);
		},

		onFileChange: function(oEvent) {
			//This code was generated by the layout editor.
			var oModel = this.getModel("objectView");

			if (oEvent.getParameter("newValue") !== "") {
				this.getRouter().getTargets().display("upload", {
					file: oEvent.getParameter("files")[0],
					month: oModel.getProperty("/month"),
					year: oModel.getProperty("/year"),
					id: this.getView().getBindingContext().getProperty("id")
				});

			}

		},
		/* =========================================================== 
		/* internal methods                                            */
		/* =========================================================== */
		/**
		 * Binds the view to the object path.
		 * @function
		 * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'
		 * @private
		 */
		_onObjectMatched: function(oEvent) {
			var sObjectId = oEvent.getParameter("arguments").objectId;
			var oViewModel = this.getModel("objectView");
			oViewModel.setProperty("/year", new Date().getFullYear());
			oViewModel.setProperty("/month", new Date().getMonth() + 1);
			this.getModel().metadataLoaded().then(function() {
				var sObjectPath = this.getModel().createKey("Balance", {
					id: sObjectId
				});
				this._bindView("/" + sObjectPath);
				var oModel = this.getModel("objectView");
				var sSoldePath = this.getModel().createKey("SoldeMois", {
					id: sObjectId + oModel.getProperty("/year") + oModel.getProperty("/month")
				});
				this._bindDetailPanel("/" + sSoldePath);
				this._initBindingEventHandler();
				this._filterTable();
			}.bind(this));
		},
		/**
		 * Binds the view to the object path.
		 * @function
		 * @param {string} sObjectPath path to the object to be bound
		 * @private
		 */
		_bindView: function(sObjectPath) {
			var oViewModel = this.getModel("objectView"),
				oDataModel = this.getModel();
			this.getView().bindElement({
				path: sObjectPath,
				events: {
					change: this._onBindingChange.bind(this),
					dataRequested: function() {
						oDataModel.metadataLoaded().then(function() {
							// Busy indicator on view should only be set if metadata is loaded,
							// otherwise there may be two busy indications next to each other on the
							// screen. This happens because route matched handler already calls '_bindView'
							// while metadata is loaded.
							oViewModel.setProperty("/busy", true);
						});
					},
					dataReceived: function() {
						oViewModel.setProperty("/busy", false);
					}
				}
			});
		},
		_bindDetailPanel: function(sObjectPath) {
			//console.log(sObjectPath);
			this.byId("detailPanel").bindElement({
				path: sObjectPath
			});
		},
		_initBindingEventHandler: function() {
			var oTable = this.byId("table");
			var oBusyIndicator = oTable.getNoData();
			var oBinding = oTable.getBinding("rows");
			oBinding.attachDataRequested(function() {
				oTable.setNoData(oBusyIndicator);
			});
			oBinding.attachDataReceived(function() {
				oTable.setNoData(null); //Use default again ("No Data" in case no data is available)
			});
		},
		_onBindingChange: function() {
			var oView = this.getView(),
				oViewModel = this.getModel("objectView"),
				oElementBinding = oView.getElementBinding();
			// No data for the binding
			if (!oElementBinding.getBoundContext()) {
				this.getRouter().getTargets().display("objectNotFound");
				return;
			}
			var oResourceBundle = this.getResourceBundle(),
				oObject = oView.getBindingContext().getObject(),
				sObjectId = oObject.id,
				sObjectName = oObject.Description;
			// Everything went fine.
			oViewModel.setProperty("/busy", false);
			oViewModel.setProperty("/shareSendEmailSubject", oResourceBundle.getText("shareSendEmailObjectSubject", [sObjectId]));
			oViewModel.setProperty("/shareSendEmailMessage", oResourceBundle.getText("shareSendEmailObjectMessage", [
				sObjectName,
				sObjectId,
				location.href
			]));
		},
		_getFormFields: function(oSimpleForm) {
				var aControls = [];
				var aFormContent = oSimpleForm.getContent();
				var sControlType;
				for (var i = 0; i < aFormContent.length; i++) {
					sControlType = aFormContent[i].getMetadata().getName();
					if (sControlType === "sap.m.Input" || sControlType === "sap.m.DatePicker" || sControlType === "sap.m.ComboBox") {
						aControls.push({
							control: aFormContent[i],
							required: aFormContent[i - 1].getRequired && aFormContent[i - 1].getRequired()
						});
					}
				}
				return aControls;
			},
			
	_onObject:function(){
		this.byId("fileUploader").setValue(null);
	}		
			/**
			 *@memberOf budget.controller.Object
			 */
			/*		_initCustomFormat: function() {
				var chartFormatter = this.chartFormatter = ChartFormatter.getInstance();
				chartFormatter.registerCustomFormatter("__UI5__FloatMaxFraction2",
					function(value) {
						var fixedFloat = sap.ui.core.format.NumberFormat.getFloatInstance({
							style: 'Standard',
							maxFractionDigits: 2
						});
						return fixedFloat.format(value);
					});
				Format.numericFormatter(chartFormatter);
			}*/

	});
});